{
  "openapi": "3.0.3",
  "info": {
    "title": "NodeJS - REST API",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "user",
      "description": "Operations about user"
    },
    {
      "name": "store",
      "description": "Operations about store"
    }
  ],
  "paths": {
    "/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Show all users",
        "description": "This can only be done by admins.",
        "responses": {
          "200": {
            "description": "Successful operation returns an array of user objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Users not found"
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "requestBody": {
          "description": "Expects a JSON object representing user data (username, password, age, role)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User-post"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns a message indicating successful user creation"
          },
          "400": {
            "description": "Check the provided information and fill in the missing fields"
          },
          "409": {
            "description": "Username taken, try another username"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user identified by the id",
        "description": "This can only be done by admins.",
        "requestBody": {
          "description": "Expects JSON object with username, age, id and role",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User-put"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a message indicating successful user update"
          },
          "400": {
            "description": "Check the provided information and fill in the missing fields"
          },
          "404": {
            "description": "User not found"
          },
          "409": {
            "description": "Username taken, try another username"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "patch": {
        "tags": [
          "user"
        ],
        "summary": "Update age of the authenticated user",
        "requestBody": {
          "description": "Expects a JSON object with the new age",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User-patch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a message indicating a successful age update"
          },
          "400": {
            "description": "Check the provided information and fill in the missing fields"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/user/account": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Show user data of logged in user",
        "responses": {
          "200": {
            "description": "Successful operation returns the user object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "requestBody": {
          "description": "Expects JSON object with username and password",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation returns a message indicating successful login and sets a cookie with an access token"
          },
          "400": {
            "description": "Invalid username/password supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/user/logout": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Logs the user out",
        "responses": {
          "200": {
            "description": "Successful operation returns a status code indicating successful logout and deletes the generated access token."
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be fetched.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation returns the user object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User with id {id} not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by admins.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a message indicating successful user deletion"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/checkToken": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Validate access token",
        "responses": {
          "200": {
            "description": "Returns a message indicating valid token."
          },
          "401": {
            "description": "Returns a message indicating invalid token."
          }
        }
      }
    },
    "/store": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Show all stores",
        "responses": {
          "200": {
            "description": "Successful operation returns an array of store objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            }
          },
          "404": {
            "description": "Stores not found"
          }
        }
      },
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Create store",
        "description": "This can only be done by admins.",
        "requestBody": {
          "description": "Expects a JSON object representing store data (name, address)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Store-post"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation returns a message indicating successful store creation"
          },
          "400": {
            "description": "Check the provided information and fill in the missing fields"
          },
          "409": {
            "description": "Name taken, try another name"
          }
        }
      },
      "put": {
        "tags": [
          "store"
        ],
        "summary": "Update store",
        "description": "This can only be done by admins.",
        "requestBody": {
          "description": "Expects JSON object with id, name, and address",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Store"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation returns a message indicating successful store update"
          },
          "400": {
            "description": "Check the provided information and fill in the missing fields"
          },
          "404": {
            "description": "Store not found"
          },
          "409": {
            "description": "Name taken, try another name"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/store/{id}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get store by store id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be fetched.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation returns the store object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            }
          },
          "404": {
            "description": "Store with id {id} not found"
          }
        }
      },
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Delete store",
        "description": "This can only be done by admins.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation returns a message indicating successful store deletion"
          },
          "404": {
            "description": "Store not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "username": {
            "type": "string",
            "example": "userTest123"
          },
          "age": {
            "type": "integer",
            "format": "int64",
            "example": 30
          },
          "role": {
            "type": "string",
            "example": "user"
          }
        }
      },
      "User-post": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "userTest123"
          },
          "password": {
            "type": "string",
            "example": "paSSw0rd"
          },
          "age": {
            "type": "integer",
            "format": "int64",
            "example": 30
          },
          "role": {
            "type": "string",
            "example": "user"
          }
        }
      },
      "User-put": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "username": {
            "type": "string",
            "example": "userTest123"
          },
          "age": {
            "type": "integer",
            "format": "int64",
            "example": 30
          },
          "role": {
            "type": "string",
            "example": "user"
          }
        }
      },
      "User-patch": {
        "type": "object",
        "properties": {
          "age": {
            "type": "integer",
            "format": "int64",
            "example": 30
          }
        }
      },
      "Login": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "userTest123"
          },
          "password": {
            "type": "string",
            "example": "paSSw0rd"
          }
        }
      },
      "Store": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "Testikauppa"
          },
          "address": {
            "type": "string",
            "example": "Testiosoite 1, 05200 Kaupunki"
          }
        }
      },
      "Store-post": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Testikauppa"
          },
          "address": {
            "type": "string",
            "example": "Testiosoite 1, 05200 Kaupunki"
          }
        }
      }
    },
    "requestBodies": {
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    }
  }
}